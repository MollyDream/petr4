[Intro]
We have translated the type system of the typed ASTs from Ocaml to Coq. That
includes the data structures in Prog.ml, the data structures in Typed.ml and 
a small subset of data structures in Types.ml. We then extracted back the Ocaml
code from the Coq code. During this process of rewriting, and by comparing the
original Ocaml code with the extracted Ocaml code, we propose a refactoring plan
to replace the Ocaml code with the Ocaml code auto-extracted from Coq.

[Benefits]
The Ocaml code extracted from Coq is more organzied, easier to maintain, and
always in sync with the Coq development. 

[Issues and proposed solutions]
1.
We found that since Types.Annotation and Typed.Parameter are defined with 
Types.Expression, the type system of the typed ASTs are overlapped with the type
system of the parsed ASTs, and the current Ocaml code structures do not reflect
that. In our proposal, we want to use a separate file to store the types 
shared by the two type systems, namely the basic types (info, P4Int, P4String, 
name and Op) and three modules (Types.Annotation, Types.Type and 
Types.Expression with their dependencies Types.Argument and Types.KeyValue).

2.
The data structures and functions are all defined in Prog.ml, adding more
complexity to the code infrastructure. We propose to separate them into two 
files.

3.
We found that there is a lot of mutual recursiveness in the current Ocaml code,
and keeping this level of mutual recursiveness would make the later proofs in
Coq difficult. When writing the Coq code, we have removed the unnecassary mutual
recursiveness, but that still leaves Prog.Statement, Prog.Parser, 
Prog.Declaration and Prog.Value mutually recursive, as well as Types.Type and
Types.Expression mutually recursive. How to detangle these remaining 
complexities is worth discussion with the Cornell group.

4. 
The original Ocaml code has many PPX annotations. After extracting Ocaml code
from Coq, we need to add back those annotations. It seems feasible to create
a writer to insert the annotations automatically, though the Cornell group seems
to have already looked into this issue and may have more inputs on the exact 
solution as well as the patterns of the annotations.
https://cornell-princeton.slack.com/archives/G01BBSU53GF/p1602275090020700










