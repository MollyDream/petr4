error {
    NoError,
    PacketTooShort,
    NoMatch,
    StackOutOfBounds,
    HeaderTooShort,
    ParserTimeout,
    ParserInvalidArgument
}
extern packet_in {
    void extract<T>(out T hdr);
    void extract<
    T>(out T variableSizeHeader,in bit<32> variableFieldSizeInBits);
    T lookahead<T>();
    void advance(in bit<32> sizeInBits);
    bit<32> length();
}
extern packet_out {
    void emit<T>(in T hdr);
}
extern void verify(in bool check,in error toSignal);
action NoAction() { }
match_kind {
    exact,
    ternary,
    lpm
}
match_kind {
    range,
    optional,
    selector
}
@metadata
@name("standard_metadata")
struct standard_metadata_t {
    bit<9> ingress_port;
    bit<9> egress_spec;
    bit<9> egress_port;
    bit<32> instance_type;
    bit<32> packet_length;
    @alias("queueing_metadata.enq_timestamp")
    bit<32> enq_timestamp;
    @alias("queueing_metadata.enq_qdepth")
    bit<19> enq_qdepth;
    @alias("queueing_metadata.deq_timedelta")
    bit<32> deq_timedelta;
    @alias("queueing_metadata.deq_qdepth")
    bit<19> deq_qdepth;
    @alias("intrinsic_metadata.ingress_global_timestamp")
    bit<48> ingress_global_timestamp;
    @alias("intrinsic_metadata.egress_global_timestamp")
    bit<48> egress_global_timestamp;
    @alias("intrinsic_metadata.mcast_grp")
    bit<16> mcast_grp;
    @alias("intrinsic_metadata.egress_rid")
    bit<16> egress_rid;
    bit<1> checksum_error;
    error parser_error;
    @alias("intrinsic_metadata.priority")
    bit<3> priority;
}
enum CounterType {
    packets,
    bytes,
    packets_and_bytes
}
enum MeterType {
    packets,
    bytes
}
extern counter {
    counter(bit<32> size,CounterType type);
    void count(in bit<32> index);
}
extern direct_counter {
    direct_counter(CounterType type);
    void count();
}
extern meter {
    meter(bit<32> size,MeterType type);
    void execute_meter<T>(in bit<32> index,out T result);
}
extern direct_meter<T> {
    direct_meter(MeterType type);
    void read(out T result);
}
extern register<
    T> {
    register(bit<32> size);
    void read(out T result,in bit<32> index);
    void write(in bit<32> index,in T value);
}
extern action_profile {
    action_profile(bit<32> size);
}
extern void random<T>(out T result,in T lo,in T hi);
extern void digest<T>(in bit<32> receiver,in T data);
enum HashAlgorithm {
    crc32,
    crc32_custom,
    crc16,
    crc16_custom,
    random,
    identity,
    csum16,
    xor16
}
@deprecated("Please use mark_to_drop(standard_metadata) instead.")
extern void mark_to_drop();
extern void mark_to_drop(inout standard_metadata_t standard_metadata);
extern void hash<O,T,D,
M>(out O result,in HashAlgorithm algo,in T base,in D data,in M max);
extern action_selector {
    action_selector(HashAlgorithm algorithm,bit<32> size,bit<32> outputWidth);
}
enum CloneType {
    I2E,
    E2E
}
@deprecated("Please use verify_checksum/update_checksum instead.")
extern Checksum16 {
    Checksum16();
    bit<16> get<D>(in D data);
}
extern void verify_checksum<T,
O>(in bool condition,in T data,in O checksum,HashAlgorithm algo);
extern void update_checksum<T,
O>(in bool condition,in T data,inout O checksum,HashAlgorithm algo);
extern void verify_checksum_with_payload<T,
O>(in bool condition,in T data,in O checksum,HashAlgorithm algo);
extern void update_checksum_with_payload<T,
O>(in bool condition,in T data,inout O checksum,HashAlgorithm algo);
extern void resubmit<T>(in T data);
extern void recirculate<T>(in T data);
extern void clone(in CloneType type,in bit<32> session);
extern void clone3<T>(in CloneType type,in bit<32> session,in T data);
extern void truncate(in bit<32> length);
extern void assert(in bool check);
extern void assume(in bool check);
extern void log_msg(string msg);
extern void log_msg<T>(string msg,in T data);
parser Parser<H,M>
    (packet_in b,out H parsedHdr,inout M meta,
     inout standard_metadata_t standard_metadata);
control VerifyChecksum<H,M>(inout H hdr,inout M meta);
@pipeline
    control Ingress<H,M>
    (inout H hdr,inout M meta,inout standard_metadata_t standard_metadata);
@pipeline
    control Egress<H,M>
    (inout H hdr,inout M meta,inout standard_metadata_t standard_metadata);
control ComputeChecksum<H,M>(inout H hdr,inout M meta);
@deparser
    control Deparser<H>(packet_out b,in H hdr);
package V1Switch<H,M>
    (Parser<H,M> p,VerifyChecksum<H,M> vr,Ingress<H,M> ig,Egress<H,M> eg,
     ComputeChecksum<H,M> ck,Deparser<H> dep);
struct metadata { }
struct headers { }
parser MyParser(packet_in packet,out headers hdr,inout metadata meta,
                inout standard_metadata_t standard_metadata) {
    state start {
        transition accept;
    }
}
control MyIngress(inout headers hdr,inout metadata meta,
                  inout standard_metadata_t standard_metadata) {
    action drop() {
        mark_to_drop(standard_metadata);
    }
    apply {
        drop();
    }
}
control MyEgress(inout headers hdr,inout metadata meta,
                 inout standard_metadata_t standard_metadata) {
    apply { }
}
control MyDeparser(packet_out packet,in headers hdr) {
    apply { }
}
control MyVerifyChecksum(inout headers hdr,inout metadata meta) {
    apply { }
}
control MyComputeChecksum(inout headers hdr,inout metadata meta) {
    apply { }
}
V1Switch(MyParser(),MyVerifyChecksum(),MyIngress(),MyEgress(),
         MyComputeChecksum(),MyDeparser()) main;

----------
[
  "program",
  [
    [
      "Error",
      {
        "members": [
          "NoError", "PacketTooShort", "NoMatch", "StackOutOfBounds",
          "HeaderTooShort", "ParserTimeout", "ParserInvalidArgument"
        ]
      }
    ],
    [
      "ExternObject",
      {
        "annotations": [],
        "name": "packet_in",
        "type_params": [],
        "methods": [
          [
            "Method",
            {
              "annotations": [],
              "return": [ "void" ],
              "name": "extract",
              "type_params": [ "T" ],
              "params": [
                {
                  "annotations": [],
                  "direction": [ "Out" ],
                  "typ": [ "name", [ "BareName", "T" ] ],
                  "variable": "hdr",
                  "opt_value": null
                }
              ]
            }
          ],
          [
            "Method",
            {
              "annotations": [],
              "return": [ "void" ],
              "name": "extract",
              "type_params": [ "T" ],
              "params": [
                {
                  "annotations": [],
                  "direction": [ "Out" ],
                  "typ": [ "name", [ "BareName", "T" ] ],
                  "variable": "variableSizeHeader",
                  "opt_value": null
                },
                {
                  "annotations": [],
                  "direction": [ "In" ],
                  "typ": [
                    "bit",
                    [ "int", { "value": "32", "width_signed": null } ]
                  ],
                  "variable": "variableFieldSizeInBits",
                  "opt_value": null
                }
              ]
            }
          ],
          [
            "Method",
            {
              "annotations": [],
              "return": [ "name", [ "BareName", "T" ] ],
              "name": "lookahead",
              "type_params": [ "T" ],
              "params": []
            }
          ],
          [
            "Method",
            {
              "annotations": [],
              "return": [ "void" ],
              "name": "advance",
              "type_params": [],
              "params": [
                {
                  "annotations": [],
                  "direction": [ "In" ],
                  "typ": [
                    "bit",
                    [ "int", { "value": "32", "width_signed": null } ]
                  ],
                  "variable": "sizeInBits",
                  "opt_value": null
                }
              ]
            }
          ],
          [
            "Method",
            {
              "annotations": [],
              "return": [
                "bit",
                [ "int", { "value": "32", "width_signed": null } ]
              ],
              "name": "length",
              "type_params": [],
              "params": []
            }
          ]
        ]
      }
    ],
    [
      "ExternObject",
      {
        "annotations": [],
        "name": "packet_out",
        "type_params": [],
        "methods": [
          [
            "Method",
            {
              "annotations": [],
              "return": [ "void" ],
              "name": "emit",
              "type_params": [ "T" ],
              "params": [
                {
                  "annotations": [],
                  "direction": [ "In" ],
                  "typ": [ "name", [ "BareName", "T" ] ],
                  "variable": "hdr",
                  "opt_value": null
                }
              ]
            }
          ]
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "verify",
        "type_params": [],
        "params": [
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "bool" ],
            "variable": "check",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "error" ],
            "variable": "toSignal",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "Action",
      {
        "annotations": [],
        "name": "NoAction",
        "params": [],
        "body": { "annotations": [], "statements": [] }
      }
    ],
    [ "MatchKind", { "members": [ "exact", "ternary", "lpm" ] } ],
    [ "MatchKind", { "members": [ "range", "optional", "selector" ] } ],
    [
      "Struct",
      {
        "annotations": [
          { "name": "metadata", "body": [ "Empty" ] },
          {
            "name": "name",
            "body": [ "Unparsed", [ "\"standard_metadata\"" ] ]
          }
        ],
        "name": "standard_metadata_t",
        "fields": [
          {
            "annotations": [],
            "type": [
              "bit",
              [ "int", { "value": "9", "width_signed": null } ]
            ],
            "name": "ingress_port"
          },
          {
            "annotations": [],
            "type": [
              "bit",
              [ "int", { "value": "9", "width_signed": null } ]
            ],
            "name": "egress_spec"
          },
          {
            "annotations": [],
            "type": [
              "bit",
              [ "int", { "value": "9", "width_signed": null } ]
            ],
            "name": "egress_port"
          },
          {
            "annotations": [],
            "type": [
              "bit",
              [ "int", { "value": "32", "width_signed": null } ]
            ],
            "name": "instance_type"
          },
          {
            "annotations": [],
            "type": [
              "bit",
              [ "int", { "value": "32", "width_signed": null } ]
            ],
            "name": "packet_length"
          },
          {
            "annotations": [
              {
                "name": "alias",
                "body": [
                  "Unparsed",
                  [ "\"queueing_metadata.enq_timestamp\"" ]
                ]
              }
            ],
            "type": [
              "bit",
              [ "int", { "value": "32", "width_signed": null } ]
            ],
            "name": "enq_timestamp"
          },
          {
            "annotations": [
              {
                "name": "alias",
                "body": [
                  "Unparsed",
                  [ "\"queueing_metadata.enq_qdepth\"" ]
                ]
              }
            ],
            "type": [
              "bit",
              [ "int", { "value": "19", "width_signed": null } ]
            ],
            "name": "enq_qdepth"
          },
          {
            "annotations": [
              {
                "name": "alias",
                "body": [
                  "Unparsed",
                  [ "\"queueing_metadata.deq_timedelta\"" ]
                ]
              }
            ],
            "type": [
              "bit",
              [ "int", { "value": "32", "width_signed": null } ]
            ],
            "name": "deq_timedelta"
          },
          {
            "annotations": [
              {
                "name": "alias",
                "body": [
                  "Unparsed",
                  [ "\"queueing_metadata.deq_qdepth\"" ]
                ]
              }
            ],
            "type": [
              "bit",
              [ "int", { "value": "19", "width_signed": null } ]
            ],
            "name": "deq_qdepth"
          },
          {
            "annotations": [
              {
                "name": "alias",
                "body": [
                  "Unparsed",
                  [ "\"intrinsic_metadata.ingress_global_timestamp\"" ]
                ]
              }
            ],
            "type": [
              "bit",
              [ "int", { "value": "48", "width_signed": null } ]
            ],
            "name": "ingress_global_timestamp"
          },
          {
            "annotations": [
              {
                "name": "alias",
                "body": [
                  "Unparsed",
                  [ "\"intrinsic_metadata.egress_global_timestamp\"" ]
                ]
              }
            ],
            "type": [
              "bit",
              [ "int", { "value": "48", "width_signed": null } ]
            ],
            "name": "egress_global_timestamp"
          },
          {
            "annotations": [
              {
                "name": "alias",
                "body": [
                  "Unparsed",
                  [ "\"intrinsic_metadata.mcast_grp\"" ]
                ]
              }
            ],
            "type": [
              "bit",
              [ "int", { "value": "16", "width_signed": null } ]
            ],
            "name": "mcast_grp"
          },
          {
            "annotations": [
              {
                "name": "alias",
                "body": [
                  "Unparsed",
                  [ "\"intrinsic_metadata.egress_rid\"" ]
                ]
              }
            ],
            "type": [
              "bit",
              [ "int", { "value": "16", "width_signed": null } ]
            ],
            "name": "egress_rid"
          },
          {
            "annotations": [],
            "type": [
              "bit",
              [ "int", { "value": "1", "width_signed": null } ]
            ],
            "name": "checksum_error"
          },
          { "annotations": [], "type": [ "error" ], "name": "parser_error" },
          {
            "annotations": [
              {
                "name": "alias",
                "body": [ "Unparsed", [ "\"intrinsic_metadata.priority\"" ] ]
              }
            ],
            "type": [
              "bit",
              [ "int", { "value": "3", "width_signed": null } ]
            ],
            "name": "priority"
          }
        ]
      }
    ],
    [
      "Enum",
      {
        "annotations": [],
        "name": "CounterType",
        "members": [ "packets", "bytes", "packets_and_bytes" ]
      }
    ],
    [
      "Enum",
      {
        "annotations": [],
        "name": "MeterType",
        "members": [ "packets", "bytes" ]
      }
    ],
    [
      "ExternObject",
      {
        "annotations": [],
        "name": "counter",
        "type_params": [],
        "methods": [
          [
            "Constructor",
            {
              "annotations": [],
              "name": "counter",
              "params": [
                {
                  "annotations": [],
                  "direction": null,
                  "typ": [
                    "bit",
                    [ "int", { "value": "32", "width_signed": null } ]
                  ],
                  "variable": "size",
                  "opt_value": null
                },
                {
                  "annotations": [],
                  "direction": null,
                  "typ": [ "name", [ "BareName", "CounterType" ] ],
                  "variable": "type",
                  "opt_value": null
                }
              ]
            }
          ],
          [
            "Method",
            {
              "annotations": [],
              "return": [ "void" ],
              "name": "count",
              "type_params": [],
              "params": [
                {
                  "annotations": [],
                  "direction": [ "In" ],
                  "typ": [
                    "bit",
                    [ "int", { "value": "32", "width_signed": null } ]
                  ],
                  "variable": "index",
                  "opt_value": null
                }
              ]
            }
          ]
        ]
      }
    ],
    [
      "ExternObject",
      {
        "annotations": [],
        "name": "direct_counter",
        "type_params": [],
        "methods": [
          [
            "Constructor",
            {
              "annotations": [],
              "name": "direct_counter",
              "params": [
                {
                  "annotations": [],
                  "direction": null,
                  "typ": [ "name", [ "BareName", "CounterType" ] ],
                  "variable": "type",
                  "opt_value": null
                }
              ]
            }
          ],
          [
            "Method",
            {
              "annotations": [],
              "return": [ "void" ],
              "name": "count",
              "type_params": [],
              "params": []
            }
          ]
        ]
      }
    ],
    [
      "ExternObject",
      {
        "annotations": [],
        "name": "meter",
        "type_params": [],
        "methods": [
          [
            "Constructor",
            {
              "annotations": [],
              "name": "meter",
              "params": [
                {
                  "annotations": [],
                  "direction": null,
                  "typ": [
                    "bit",
                    [ "int", { "value": "32", "width_signed": null } ]
                  ],
                  "variable": "size",
                  "opt_value": null
                },
                {
                  "annotations": [],
                  "direction": null,
                  "typ": [ "name", [ "BareName", "MeterType" ] ],
                  "variable": "type",
                  "opt_value": null
                }
              ]
            }
          ],
          [
            "Method",
            {
              "annotations": [],
              "return": [ "void" ],
              "name": "execute_meter",
              "type_params": [ "T" ],
              "params": [
                {
                  "annotations": [],
                  "direction": [ "In" ],
                  "typ": [
                    "bit",
                    [ "int", { "value": "32", "width_signed": null } ]
                  ],
                  "variable": "index",
                  "opt_value": null
                },
                {
                  "annotations": [],
                  "direction": [ "Out" ],
                  "typ": [ "name", [ "BareName", "T" ] ],
                  "variable": "result",
                  "opt_value": null
                }
              ]
            }
          ]
        ]
      }
    ],
    [
      "ExternObject",
      {
        "annotations": [],
        "name": "direct_meter",
        "type_params": [ "T" ],
        "methods": [
          [
            "Constructor",
            {
              "annotations": [],
              "name": "direct_meter",
              "params": [
                {
                  "annotations": [],
                  "direction": null,
                  "typ": [ "name", [ "BareName", "MeterType" ] ],
                  "variable": "type",
                  "opt_value": null
                }
              ]
            }
          ],
          [
            "Method",
            {
              "annotations": [],
              "return": [ "void" ],
              "name": "read",
              "type_params": [],
              "params": [
                {
                  "annotations": [],
                  "direction": [ "Out" ],
                  "typ": [ "name", [ "BareName", "T" ] ],
                  "variable": "result",
                  "opt_value": null
                }
              ]
            }
          ]
        ]
      }
    ],
    [
      "ExternObject",
      {
        "annotations": [],
        "name": "register",
        "type_params": [ "T" ],
        "methods": [
          [
            "Constructor",
            {
              "annotations": [],
              "name": "register",
              "params": [
                {
                  "annotations": [],
                  "direction": null,
                  "typ": [
                    "bit",
                    [ "int", { "value": "32", "width_signed": null } ]
                  ],
                  "variable": "size",
                  "opt_value": null
                }
              ]
            }
          ],
          [
            "Method",
            {
              "annotations": [],
              "return": [ "void" ],
              "name": "read",
              "type_params": [],
              "params": [
                {
                  "annotations": [],
                  "direction": [ "Out" ],
                  "typ": [ "name", [ "BareName", "T" ] ],
                  "variable": "result",
                  "opt_value": null
                },
                {
                  "annotations": [],
                  "direction": [ "In" ],
                  "typ": [
                    "bit",
                    [ "int", { "value": "32", "width_signed": null } ]
                  ],
                  "variable": "index",
                  "opt_value": null
                }
              ]
            }
          ],
          [
            "Method",
            {
              "annotations": [],
              "return": [ "void" ],
              "name": "write",
              "type_params": [],
              "params": [
                {
                  "annotations": [],
                  "direction": [ "In" ],
                  "typ": [
                    "bit",
                    [ "int", { "value": "32", "width_signed": null } ]
                  ],
                  "variable": "index",
                  "opt_value": null
                },
                {
                  "annotations": [],
                  "direction": [ "In" ],
                  "typ": [ "name", [ "BareName", "T" ] ],
                  "variable": "value",
                  "opt_value": null
                }
              ]
            }
          ]
        ]
      }
    ],
    [
      "ExternObject",
      {
        "annotations": [],
        "name": "action_profile",
        "type_params": [],
        "methods": [
          [
            "Constructor",
            {
              "annotations": [],
              "name": "action_profile",
              "params": [
                {
                  "annotations": [],
                  "direction": null,
                  "typ": [
                    "bit",
                    [ "int", { "value": "32", "width_signed": null } ]
                  ],
                  "variable": "size",
                  "opt_value": null
                }
              ]
            }
          ]
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "random",
        "type_params": [ "T" ],
        "params": [
          {
            "annotations": [],
            "direction": [ "Out" ],
            "typ": [ "name", [ "BareName", "T" ] ],
            "variable": "result",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "T" ] ],
            "variable": "lo",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "T" ] ],
            "variable": "hi",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "digest",
        "type_params": [ "T" ],
        "params": [
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [
              "bit",
              [ "int", { "value": "32", "width_signed": null } ]
            ],
            "variable": "receiver",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "T" ] ],
            "variable": "data",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "Enum",
      {
        "annotations": [],
        "name": "HashAlgorithm",
        "members": [
          "crc32", "crc32_custom", "crc16", "crc16_custom", "random",
          "identity", "csum16", "xor16"
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [
          {
            "name": "deprecated",
            "body": [
              "Unparsed",
              [ "\"Please use mark_to_drop(standard_metadata) instead.\"" ]
            ]
          }
        ],
        "return": [ "void" ],
        "name": "mark_to_drop",
        "type_params": [],
        "params": []
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "mark_to_drop",
        "type_params": [],
        "params": [
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "standard_metadata_t" ] ],
            "variable": "standard_metadata",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "hash",
        "type_params": [ "O", "T", "D", "M" ],
        "params": [
          {
            "annotations": [],
            "direction": [ "Out" ],
            "typ": [ "name", [ "BareName", "O" ] ],
            "variable": "result",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "HashAlgorithm" ] ],
            "variable": "algo",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "T" ] ],
            "variable": "base",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "D" ] ],
            "variable": "data",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "M" ] ],
            "variable": "max",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ExternObject",
      {
        "annotations": [],
        "name": "action_selector",
        "type_params": [],
        "methods": [
          [
            "Constructor",
            {
              "annotations": [],
              "name": "action_selector",
              "params": [
                {
                  "annotations": [],
                  "direction": null,
                  "typ": [ "name", [ "BareName", "HashAlgorithm" ] ],
                  "variable": "algorithm",
                  "opt_value": null
                },
                {
                  "annotations": [],
                  "direction": null,
                  "typ": [
                    "bit",
                    [ "int", { "value": "32", "width_signed": null } ]
                  ],
                  "variable": "size",
                  "opt_value": null
                },
                {
                  "annotations": [],
                  "direction": null,
                  "typ": [
                    "bit",
                    [ "int", { "value": "32", "width_signed": null } ]
                  ],
                  "variable": "outputWidth",
                  "opt_value": null
                }
              ]
            }
          ]
        ]
      }
    ],
    [
      "Enum",
      { "annotations": [], "name": "CloneType", "members": [ "I2E", "E2E" ] }
    ],
    [
      "ExternObject",
      {
        "annotations": [
          {
            "name": "deprecated",
            "body": [
              "Unparsed",
              [ "\"Please use verify_checksum/update_checksum instead.\"" ]
            ]
          }
        ],
        "name": "Checksum16",
        "type_params": [],
        "methods": [
          [
            "Constructor",
            { "annotations": [], "name": "Checksum16", "params": [] }
          ],
          [
            "Method",
            {
              "annotations": [],
              "return": [
                "bit",
                [ "int", { "value": "16", "width_signed": null } ]
              ],
              "name": "get",
              "type_params": [ "D" ],
              "params": [
                {
                  "annotations": [],
                  "direction": [ "In" ],
                  "typ": [ "name", [ "BareName", "D" ] ],
                  "variable": "data",
                  "opt_value": null
                }
              ]
            }
          ]
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "verify_checksum",
        "type_params": [ "T", "O" ],
        "params": [
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "bool" ],
            "variable": "condition",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "T" ] ],
            "variable": "data",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "O" ] ],
            "variable": "checksum",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": null,
            "typ": [ "name", [ "BareName", "HashAlgorithm" ] ],
            "variable": "algo",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "update_checksum",
        "type_params": [ "T", "O" ],
        "params": [
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "bool" ],
            "variable": "condition",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "T" ] ],
            "variable": "data",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "O" ] ],
            "variable": "checksum",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": null,
            "typ": [ "name", [ "BareName", "HashAlgorithm" ] ],
            "variable": "algo",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "verify_checksum_with_payload",
        "type_params": [ "T", "O" ],
        "params": [
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "bool" ],
            "variable": "condition",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "T" ] ],
            "variable": "data",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "O" ] ],
            "variable": "checksum",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": null,
            "typ": [ "name", [ "BareName", "HashAlgorithm" ] ],
            "variable": "algo",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "update_checksum_with_payload",
        "type_params": [ "T", "O" ],
        "params": [
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "bool" ],
            "variable": "condition",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "T" ] ],
            "variable": "data",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "O" ] ],
            "variable": "checksum",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": null,
            "typ": [ "name", [ "BareName", "HashAlgorithm" ] ],
            "variable": "algo",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "resubmit",
        "type_params": [ "T" ],
        "params": [
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "T" ] ],
            "variable": "data",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "recirculate",
        "type_params": [ "T" ],
        "params": [
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "T" ] ],
            "variable": "data",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "clone",
        "type_params": [],
        "params": [
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "CloneType" ] ],
            "variable": "type",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [
              "bit",
              [ "int", { "value": "32", "width_signed": null } ]
            ],
            "variable": "session",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "clone3",
        "type_params": [ "T" ],
        "params": [
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "CloneType" ] ],
            "variable": "type",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [
              "bit",
              [ "int", { "value": "32", "width_signed": null } ]
            ],
            "variable": "session",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "T" ] ],
            "variable": "data",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "truncate",
        "type_params": [],
        "params": [
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [
              "bit",
              [ "int", { "value": "32", "width_signed": null } ]
            ],
            "variable": "length",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "assert",
        "type_params": [],
        "params": [
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "bool" ],
            "variable": "check",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "assume",
        "type_params": [],
        "params": [
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "bool" ],
            "variable": "check",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "log_msg",
        "type_params": [],
        "params": [
          {
            "annotations": [],
            "direction": null,
            "typ": [ "string" ],
            "variable": "msg",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ExternFunction",
      {
        "annotations": [],
        "return": [ "void" ],
        "name": "log_msg",
        "type_params": [ "T" ],
        "params": [
          {
            "annotations": [],
            "direction": null,
            "typ": [ "string" ],
            "variable": "msg",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "T" ] ],
            "variable": "data",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ParserType",
      {
        "annotations": [],
        "name": "Parser",
        "type_params": [ "H", "M" ],
        "params": [
          {
            "annotations": [],
            "direction": null,
            "typ": [ "name", [ "BareName", "packet_in" ] ],
            "variable": "b",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "Out" ],
            "typ": [ "name", [ "BareName", "H" ] ],
            "variable": "parsedHdr",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "M" ] ],
            "variable": "meta",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "standard_metadata_t" ] ],
            "variable": "standard_metadata",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ControlType",
      {
        "annotations": [],
        "name": "VerifyChecksum",
        "type_params": [ "H", "M" ],
        "params": [
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "H" ] ],
            "variable": "hdr",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "M" ] ],
            "variable": "meta",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ControlType",
      {
        "annotations": [ { "name": "pipeline", "body": [ "Empty" ] } ],
        "name": "Ingress",
        "type_params": [ "H", "M" ],
        "params": [
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "H" ] ],
            "variable": "hdr",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "M" ] ],
            "variable": "meta",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "standard_metadata_t" ] ],
            "variable": "standard_metadata",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ControlType",
      {
        "annotations": [ { "name": "pipeline", "body": [ "Empty" ] } ],
        "name": "Egress",
        "type_params": [ "H", "M" ],
        "params": [
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "H" ] ],
            "variable": "hdr",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "M" ] ],
            "variable": "meta",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "standard_metadata_t" ] ],
            "variable": "standard_metadata",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ControlType",
      {
        "annotations": [],
        "name": "ComputeChecksum",
        "type_params": [ "H", "M" ],
        "params": [
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "H" ] ],
            "variable": "hdr",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "M" ] ],
            "variable": "meta",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "ControlType",
      {
        "annotations": [ { "name": "deparser", "body": [ "Empty" ] } ],
        "name": "Deparser",
        "type_params": [ "H" ],
        "params": [
          {
            "annotations": [],
            "direction": null,
            "typ": [ "name", [ "BareName", "packet_out" ] ],
            "variable": "b",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "H" ] ],
            "variable": "hdr",
            "opt_value": null
          }
        ]
      }
    ],
    [
      "PackageType",
      {
        "annotations": [],
        "name": "V1Switch",
        "type_params": [ "H", "M" ],
        "params": [
          {
            "annotations": [],
            "direction": null,
            "typ": [
              "specialized",
              {
                "base": [ "name", [ "BareName", "Parser" ] ],
                "args": [
                  [ "name", [ "BareName", "H" ] ],
                  [ "name", [ "BareName", "M" ] ]
                ]
              }
            ],
            "variable": "p",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": null,
            "typ": [
              "specialized",
              {
                "base": [ "name", [ "BareName", "VerifyChecksum" ] ],
                "args": [
                  [ "name", [ "BareName", "H" ] ],
                  [ "name", [ "BareName", "M" ] ]
                ]
              }
            ],
            "variable": "vr",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": null,
            "typ": [
              "specialized",
              {
                "base": [ "name", [ "BareName", "Ingress" ] ],
                "args": [
                  [ "name", [ "BareName", "H" ] ],
                  [ "name", [ "BareName", "M" ] ]
                ]
              }
            ],
            "variable": "ig",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": null,
            "typ": [
              "specialized",
              {
                "base": [ "name", [ "BareName", "Egress" ] ],
                "args": [
                  [ "name", [ "BareName", "H" ] ],
                  [ "name", [ "BareName", "M" ] ]
                ]
              }
            ],
            "variable": "eg",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": null,
            "typ": [
              "specialized",
              {
                "base": [ "name", [ "BareName", "ComputeChecksum" ] ],
                "args": [
                  [ "name", [ "BareName", "H" ] ],
                  [ "name", [ "BareName", "M" ] ]
                ]
              }
            ],
            "variable": "ck",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": null,
            "typ": [
              "specialized",
              {
                "base": [ "name", [ "BareName", "Deparser" ] ],
                "args": [ [ "name", [ "BareName", "H" ] ] ]
              }
            ],
            "variable": "dep",
            "opt_value": null
          }
        ]
      }
    ],
    [ "Struct", { "annotations": [], "name": "metadata", "fields": [] } ],
    [ "Struct", { "annotations": [], "name": "headers", "fields": [] } ],
    [
      "Parser",
      {
        "annotations": [],
        "name": "MyParser",
        "type_params": [],
        "params": [
          {
            "annotations": [],
            "direction": null,
            "typ": [ "name", [ "BareName", "packet_in" ] ],
            "variable": "packet",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "Out" ],
            "typ": [ "name", [ "BareName", "headers" ] ],
            "variable": "hdr",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "metadata" ] ],
            "variable": "meta",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "standard_metadata_t" ] ],
            "variable": "standard_metadata",
            "opt_value": null
          }
        ],
        "constructor_params": [],
        "locals": [],
        "states": [
          {
            "annotations": [],
            "name": "start",
            "statements": [],
            "transition": [ "Direct", { "next": "accept" } ]
          }
        ]
      }
    ],
    [
      "control",
      {
        "annotations": [],
        "name": "MyIngress",
        "type_params": [],
        "params": [
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "headers" ] ],
            "variable": "hdr",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "metadata" ] ],
            "variable": "meta",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "standard_metadata_t" ] ],
            "variable": "standard_metadata",
            "opt_value": null
          }
        ],
        "constructor_params": [],
        "locals": [
          [
            "Action",
            {
              "annotations": [],
              "name": "drop",
              "params": [],
              "body": {
                "annotations": [],
                "statements": [
                  [
                    "method_call",
                    {
                      "func": [ "name", [ "BareName", "mark_to_drop" ] ],
                      "type_args": [],
                      "args": [
                        [
                          "Expression",
                          {
                            "value": [
                              "name",
                              [ "BareName", "standard_metadata" ]
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                ]
              }
            }
          ]
        ],
        "apply": {
          "annotations": [],
          "statements": [
            [
              "method_call",
              {
                "func": [ "name", [ "BareName", "drop" ] ],
                "type_args": [],
                "args": []
              }
            ]
          ]
        }
      }
    ],
    [
      "control",
      {
        "annotations": [],
        "name": "MyEgress",
        "type_params": [],
        "params": [
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "headers" ] ],
            "variable": "hdr",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "metadata" ] ],
            "variable": "meta",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "standard_metadata_t" ] ],
            "variable": "standard_metadata",
            "opt_value": null
          }
        ],
        "constructor_params": [],
        "locals": [],
        "apply": { "annotations": [], "statements": [] }
      }
    ],
    [
      "control",
      {
        "annotations": [],
        "name": "MyDeparser",
        "type_params": [],
        "params": [
          {
            "annotations": [],
            "direction": null,
            "typ": [ "name", [ "BareName", "packet_out" ] ],
            "variable": "packet",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "In" ],
            "typ": [ "name", [ "BareName", "headers" ] ],
            "variable": "hdr",
            "opt_value": null
          }
        ],
        "constructor_params": [],
        "locals": [],
        "apply": { "annotations": [], "statements": [] }
      }
    ],
    [
      "control",
      {
        "annotations": [],
        "name": "MyVerifyChecksum",
        "type_params": [],
        "params": [
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "headers" ] ],
            "variable": "hdr",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "metadata" ] ],
            "variable": "meta",
            "opt_value": null
          }
        ],
        "constructor_params": [],
        "locals": [],
        "apply": { "annotations": [], "statements": [] }
      }
    ],
    [
      "control",
      {
        "annotations": [],
        "name": "MyComputeChecksum",
        "type_params": [],
        "params": [
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "headers" ] ],
            "variable": "hdr",
            "opt_value": null
          },
          {
            "annotations": [],
            "direction": [ "InOut" ],
            "typ": [ "name", [ "BareName", "metadata" ] ],
            "variable": "meta",
            "opt_value": null
          }
        ],
        "constructor_params": [],
        "locals": [],
        "apply": { "annotations": [], "statements": [] }
      }
    ],
    [
      "Instantiation",
      {
        "annotations": [],
        "type": [ "name", [ "BareName", "V1Switch" ] ],
        "args": [
          [
            "Expression",
            {
              "value": [
                "instantiation",
                {
                  "type": [ "name", [ "BareName", "MyParser" ] ],
                  "args": []
                }
              ]
            }
          ],
          [
            "Expression",
            {
              "value": [
                "instantiation",
                {
                  "type": [ "name", [ "BareName", "MyVerifyChecksum" ] ],
                  "args": []
                }
              ]
            }
          ],
          [
            "Expression",
            {
              "value": [
                "instantiation",
                {
                  "type": [ "name", [ "BareName", "MyIngress" ] ],
                  "args": []
                }
              ]
            }
          ],
          [
            "Expression",
            {
              "value": [
                "instantiation",
                {
                  "type": [ "name", [ "BareName", "MyEgress" ] ],
                  "args": []
                }
              ]
            }
          ],
          [
            "Expression",
            {
              "value": [
                "instantiation",
                {
                  "type": [ "name", [ "BareName", "MyComputeChecksum" ] ],
                  "args": []
                }
              ]
            }
          ],
          [
            "Expression",
            {
              "value": [
                "instantiation",
                {
                  "type": [ "name", [ "BareName", "MyDeparser" ] ],
                  "args": []
                }
              ]
            }
          ]
        ],
        "name": "main",
        "init": null
      }
    ]
  ]
]
error {
    NoError,
    PacketTooShort,
    NoMatch,
    StackOutOfBounds,
    HeaderTooShort,
    ParserTimeout,
    ParserInvalidArgument
}
extern packet_in {
    void extract<T>(out T hdr);
    void extract<
    T0>(out T0 variableSizeHeader,in bit<32> variableFieldSizeInBits);
    T1 lookahead<T1>();
    void advance(in bit<32> sizeInBits);
    bit<32> length();
}
extern packet_out {
    void emit<T2>(in T2 hdr);
}
extern void verify(in bool check,in error toSignal);
action NoAction() { }
match_kind {
    exact,
    ternary,
    lpm
}
match_kind {
    range,
    optional,
    selector
}
@metadata
@name("standard_metadata")
struct standard_metadata_t {
    bit<9> ingress_port;
    bit<9> egress_spec;
    bit<9> egress_port;
    bit<32> instance_type;
    bit<32> packet_length;
    @alias("queueing_metadata.enq_timestamp")
    bit<32> enq_timestamp;
    @alias("queueing_metadata.enq_qdepth")
    bit<19> enq_qdepth;
    @alias("queueing_metadata.deq_timedelta")
    bit<32> deq_timedelta;
    @alias("queueing_metadata.deq_qdepth")
    bit<19> deq_qdepth;
    @alias("intrinsic_metadata.ingress_global_timestamp")
    bit<48> ingress_global_timestamp;
    @alias("intrinsic_metadata.egress_global_timestamp")
    bit<48> egress_global_timestamp;
    @alias("intrinsic_metadata.mcast_grp")
    bit<16> mcast_grp;
    @alias("intrinsic_metadata.egress_rid")
    bit<16> egress_rid;
    bit<1> checksum_error;
    error parser_error;
    @alias("intrinsic_metadata.priority")
    bit<3> priority;
}
enum CounterType {
    packets,
    bytes,
    packets_and_bytes
}
enum MeterType {
    packets,
    bytes
}
extern counter {
    counter(bit<32> size,CounterType type);
    void count(in bit<32> index);
}
extern direct_counter {
    direct_counter(CounterType type);
    void count();
}
extern meter {
    meter(bit<32> size,MeterType type);
    void execute_meter<T3>(in bit<32> index,out T3 result);
}
extern direct_meter<
    T4> {
    direct_meter(MeterType type);
    void read(out T4 result);
}
extern register<
    T5> {
    register(bit<32> size);
    void read(out T5 result,in bit<32> index);
    void write(in bit<32> index,in T5 value);
}
extern action_profile {
    action_profile(bit<32> size);
}
extern void random<T6>(out T6 result,in T6 lo,in T6 hi);
extern void digest<T7>(in bit<32> receiver,in T7 data);
enum HashAlgorithm {
    crc32,
    crc32_custom,
    crc16,
    crc16_custom,
    random,
    identity,
    csum16,
    xor16
}
@deprecated("Please use mark_to_drop(standard_metadata) instead.")
extern void mark_to_drop();
extern void mark_to_drop(inout standard_metadata_t standard_metadata);
extern void hash<O,T8,D,
M>(out O result,in HashAlgorithm algo,in T8 base,in D data,in M max);
extern action_selector {
    action_selector(HashAlgorithm algorithm,bit<32> size,bit<32> outputWidth);
}
enum CloneType {
    I2E,
    E2E
}
@deprecated("Please use verify_checksum/update_checksum instead.")
extern Checksum16 {
    Checksum16();
    bit<16> get<D9>(in D9 data);
}
extern void verify_checksum<T10,
O11>(in bool condition,in T10 data,in O11 checksum,HashAlgorithm algo);
extern void update_checksum<T12,
O13>(in bool condition,in T12 data,inout O13 checksum,HashAlgorithm algo);
extern void verify_checksum_with_payload<T14,
O15>(in bool condition,in T14 data,in O15 checksum,HashAlgorithm algo);
extern void update_checksum_with_payload<T16,
O17>(in bool condition,in T16 data,inout O17 checksum,HashAlgorithm algo);
extern void resubmit<T18>(in T18 data);
extern void recirculate<T19>(in T19 data);
extern void clone(in CloneType type,in bit<32> session);
extern void clone3<T20>(in CloneType type,in bit<32> session,in T20 data);
extern void truncate(in bit<32> length);
extern void assert(in bool check);
extern void assume(in bool check);
extern void log_msg(string msg);
extern void log_msg<T21>(string msg,in T21 data);
parser Parser<H,M22>
    (packet_in b,out H parsedHdr,inout M22 meta,
     inout standard_metadata_t standard_metadata);
control VerifyChecksum<H23,M24>(inout H23 hdr,inout M24 meta);
@pipeline
    control Ingress<H25,M26>
    (inout H25 hdr,inout M26 meta,inout standard_metadata_t standard_metadata);
@pipeline
    control Egress<H27,M28>
    (inout H27 hdr,inout M28 meta,inout standard_metadata_t standard_metadata);
control ComputeChecksum<H29,M30>(inout H29 hdr,inout M30 meta);
@deparser
    control Deparser<H31>(packet_out b,in H31 hdr);
package V1Switch<H32,M33>
    (Parser<H32,M33> p,VerifyChecksum<H32,M33> vr,Ingress<H32,M33> ig,
     Egress<H32,M33> eg,ComputeChecksum<H32,M33> ck,Deparser<H32> dep);
struct metadata { }
struct headers { }
parser MyParser(packet_in packet,out headers hdr,inout metadata meta,
                inout standard_metadata_t standard_metadata) {
    state start {
        transition accept;
    }
}
control MyIngress(inout headers hdr,inout metadata meta,
                  inout standard_metadata_t standard_metadata) {
    action drop() {
        mark_to_drop(standard_metadata);
    }
    apply {
        drop();
    }
}
control MyEgress(inout headers hdr,inout metadata meta,
                 inout standard_metadata_t standard_metadata) {
    apply { }
}
control MyDeparser(packet_out packet,in headers hdr) {
    apply { }
}
control MyVerifyChecksum(inout headers hdr,inout metadata meta) {
    apply { }
}
control MyComputeChecksum(inout headers hdr,inout metadata meta) {
    apply { }
}
V1Switch(MyParser(),MyVerifyChecksum(),MyIngress(),MyEgress(),
         MyComputeChecksum(),MyDeparser()) main;
